#+TITLE: gudu todos

* DONE Allow keywords for defining static route segments (as well as strings)
* DONE Handle being inside a servlet container (i.e. handle non root context)
* DONE Move segments to gudu.segment
* TODO Router that auto maps: /<namespace>/<function>/<args> => (apply namespace/function args)
  Notes: see find-ns, find-var, symbol
* TODO Pass context through from gu/du to anonymous functions, allow it to be overridden
* TODO Wrappers/Decorators that convert (and simplify) input to gu & output from du
  - e.g.:
    [:a :b] = :a-b
    [:a :b] = :b
  - Questions:
    1. Implement as middleware?
* TODO Functions to walk routes
* DONE Change usage of cond for different segment types to use a protocol
* TODO New segment types
** DONE string
** DONE int
** TODO regex
** TODO static choice (i.e. set of strings)
** TODO catch all/multi segment (e.g. wiki)
** TODO custom/user defined
** TODO date segments (example of custom?)
   Consume 3 segments e.g. /2013/03/21 but only return one param (map or Java Date?)
* DONE Helper functions to map routes to handlers
* TODO Add some way to specify the default handlers (e.g. 404, 500)
* TODO Generate navigation (as hiccup?) from routes
* TODO Generate breadcrumb based on current URL
* TODO Change routes at runtime
  Note: what does this mean for gu, i.e. can you generate routes for other route configurations?
* TODO Route debugging
* TODO Route linter
  Rules:
** Nothing after map
** No duplicate/overlapping segment URLs
   e.g. { :a ["a"], :a2 ["a"] }
        { :s [string-seg], :i [int-seg] }
   Note: overlapping segments (but not entire URL) is ok.
   e.g. { :z ["x" "y" "z"], :a ["x" "y" "z" "a"], :b ["x" "y" "z" "b"] }
** Top level route must be a map
* TODO Make routes available client side
* TODO Documentation
** TODO Generate docs (marginalia or codox)
** TODO Publish docs (gh-pages)
* TODO Examples:
** Blog (using date segments)
** Wiki (using multi segment)
** Database backed (custom segment that 404s if id not in database)
** git browser (using custom segment that can do partial matches)
